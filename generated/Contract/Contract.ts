// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DocumentHashUpdated extends ethereum.Event {
  get params(): DocumentHashUpdated__Params {
    return new DocumentHashUpdated__Params(this);
  }
}

export class DocumentHashUpdated__Params {
  _event: DocumentHashUpdated;

  constructor(event: DocumentHashUpdated) {
    this._event = event;
  }

  get _queryType(): string {
    return this._event.parameters[0].value.toString();
  }

  get _documentHash(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class ManagerUpdated extends ethereum.Event {
  get params(): ManagerUpdated__Params {
    return new ManagerUpdated__Params(this);
  }
}

export class ManagerUpdated__Params {
  _event: ManagerUpdated;

  constructor(event: ManagerUpdated) {
    this._event = event;
  }

  get _queryType(): string {
    return this._event.parameters[0].value.toString();
  }

  get _manager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewRegistration extends ethereum.Event {
  get params(): NewRegistration__Params {
    return new NewRegistration__Params(this);
  }
}

export class NewRegistration__Params {
  _event: NewRegistration;

  constructor(event: NewRegistration) {
    this._event = event;
  }

  get _queryType(): string {
    return this._event.parameters[0].value.toString();
  }

  get _owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _expirationTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnerUpdated extends ethereum.Event {
  get params(): OwnerUpdated__Params {
    return new OwnerUpdated__Params(this);
  }
}

export class OwnerUpdated__Params {
  _event: OwnerUpdated;

  constructor(event: OwnerUpdated) {
    this._event = event;
  }

  get _queryType(): string {
    return this._event.parameters[0].value.toString();
  }

  get _owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RegistrationExtended extends ethereum.Event {
  get params(): RegistrationExtended__Params {
    return new RegistrationExtended__Params(this);
  }
}

export class RegistrationExtended__Params {
  _event: RegistrationExtended;

  constructor(event: RegistrationExtended) {
    this._event = event;
  }

  get _queryType(): string {
    return this._event.parameters[0].value.toString();
  }

  get _expirationTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TellorAddressUpdated extends ethereum.Event {
  get params(): TellorAddressUpdated__Params {
    return new TellorAddressUpdated__Params(this);
  }
}

export class TellorAddressUpdated__Params {
  _event: TellorAddressUpdated;

  constructor(event: TellorAddressUpdated) {
    this._event = event;
  }

  get _tellorAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Contract__getDataAfterResult {
  value0: Bytes;
  value1: BigInt;

  constructor(value0: Bytes, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_value(): Bytes {
    return this.value0;
  }

  get_timestampRetrieved(): BigInt {
    return this.value1;
  }
}

export class Contract__getDataBeforeResult {
  value0: Bytes;
  value1: BigInt;

  constructor(value0: Bytes, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_value(): Bytes {
    return this.value0;
  }

  get_timestampRetrieved(): BigInt {
    return this.value1;
  }
}

export class Contract__getIndexForDataAfterResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_found(): boolean {
    return this.value0;
  }

  get_index(): BigInt {
    return this.value1;
  }
}

export class Contract__getIndexForDataBeforeResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_found(): boolean {
    return this.value0;
  }

  get_index(): BigInt {
    return this.value1;
  }
}

export class Contract__getMultipleValuesBeforeResult {
  value0: Array<Bytes>;
  value1: Array<BigInt>;

  constructor(value0: Array<Bytes>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBytesArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  get_values(): Array<Bytes> {
    return this.value0;
  }

  get_timestamps(): Array<BigInt> {
    return this.value1;
  }
}

export class Contract__getRegistrationResultValue0Struct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get manager(): Address {
    return this[1].toAddress();
  }

  get documentHash(): string {
    return this[2].toString();
  }

  get expirationTime(): BigInt {
    return this[3].toBigInt();
  }

  get registered(): boolean {
    return this[4].toBoolean();
  }
}

export class Contract__specsResult {
  value0: Address;
  value1: Address;
  value2: string;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: string,
    value3: BigInt,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }

  getOwner(): Address {
    return this.value0;
  }

  getManager(): Address {
    return this.value1;
  }

  getDocumentHash(): string {
    return this.value2;
  }

  getExpirationTime(): BigInt {
    return this.value3;
  }

  getRegistered(): boolean {
    return this.value4;
  }
}

export class Contract__valueForResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  get_value(): BigInt {
    return this.value0;
  }

  get_timestamp(): BigInt {
    return this.value1;
  }

  get_statusCode(): BigInt {
    return this.value2;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  allRegisteredQueryTypes(param0: BigInt): string {
    let result = super.call(
      "allRegisteredQueryTypes",
      "allRegisteredQueryTypes(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toString();
  }

  try_allRegisteredQueryTypes(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "allRegisteredQueryTypes",
      "allRegisteredQueryTypes(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  feeRecipient(): Address {
    let result = super.call("feeRecipient", "feeRecipient():(address)", []);

    return result[0].toAddress();
  }

  try_feeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeRecipient", "feeRecipient():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllRegisteredQueryTypes(): Array<string> {
    let result = super.call(
      "getAllRegisteredQueryTypes",
      "getAllRegisteredQueryTypes():(string[])",
      []
    );

    return result[0].toStringArray();
  }

  try_getAllRegisteredQueryTypes(): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "getAllRegisteredQueryTypes",
      "getAllRegisteredQueryTypes():(string[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  getCostPerYearInTRB(): BigInt {
    let result = super.call(
      "getCostPerYearInTRB",
      "getCostPerYearInTRB():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCostPerYearInTRB(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCostPerYearInTRB",
      "getCostPerYearInTRB():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDataAfter(
    _queryId: Bytes,
    _timestamp: BigInt
  ): Contract__getDataAfterResult {
    let result = super.call(
      "getDataAfter",
      "getDataAfter(bytes32,uint256):(bytes,uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return new Contract__getDataAfterResult(
      result[0].toBytes(),
      result[1].toBigInt()
    );
  }

  try_getDataAfter(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<Contract__getDataAfterResult> {
    let result = super.tryCall(
      "getDataAfter",
      "getDataAfter(bytes32,uint256):(bytes,uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getDataAfterResult(value[0].toBytes(), value[1].toBigInt())
    );
  }

  getDataBefore(
    _queryId: Bytes,
    _timestamp: BigInt
  ): Contract__getDataBeforeResult {
    let result = super.call(
      "getDataBefore",
      "getDataBefore(bytes32,uint256):(bytes,uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return new Contract__getDataBeforeResult(
      result[0].toBytes(),
      result[1].toBigInt()
    );
  }

  try_getDataBefore(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<Contract__getDataBeforeResult> {
    let result = super.tryCall(
      "getDataBefore",
      "getDataBefore(bytes32,uint256):(bytes,uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getDataBeforeResult(value[0].toBytes(), value[1].toBigInt())
    );
  }

  getIndexForDataAfter(
    _queryId: Bytes,
    _timestamp: BigInt
  ): Contract__getIndexForDataAfterResult {
    let result = super.call(
      "getIndexForDataAfter",
      "getIndexForDataAfter(bytes32,uint256):(bool,uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return new Contract__getIndexForDataAfterResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_getIndexForDataAfter(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<Contract__getIndexForDataAfterResult> {
    let result = super.tryCall(
      "getIndexForDataAfter",
      "getIndexForDataAfter(bytes32,uint256):(bool,uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getIndexForDataAfterResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  getIndexForDataBefore(
    _queryId: Bytes,
    _timestamp: BigInt
  ): Contract__getIndexForDataBeforeResult {
    let result = super.call(
      "getIndexForDataBefore",
      "getIndexForDataBefore(bytes32,uint256):(bool,uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return new Contract__getIndexForDataBeforeResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_getIndexForDataBefore(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<Contract__getIndexForDataBeforeResult> {
    let result = super.tryCall(
      "getIndexForDataBefore",
      "getIndexForDataBefore(bytes32,uint256):(bool,uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getIndexForDataBeforeResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  getMultipleValuesBefore(
    _queryId: Bytes,
    _timestamp: BigInt,
    _maxAge: BigInt,
    _maxCount: BigInt
  ): Contract__getMultipleValuesBeforeResult {
    let result = super.call(
      "getMultipleValuesBefore",
      "getMultipleValuesBefore(bytes32,uint256,uint256,uint256):(bytes[],uint256[])",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp),
        ethereum.Value.fromUnsignedBigInt(_maxAge),
        ethereum.Value.fromUnsignedBigInt(_maxCount)
      ]
    );

    return new Contract__getMultipleValuesBeforeResult(
      result[0].toBytesArray(),
      result[1].toBigIntArray()
    );
  }

  try_getMultipleValuesBefore(
    _queryId: Bytes,
    _timestamp: BigInt,
    _maxAge: BigInt,
    _maxCount: BigInt
  ): ethereum.CallResult<Contract__getMultipleValuesBeforeResult> {
    let result = super.tryCall(
      "getMultipleValuesBefore",
      "getMultipleValuesBefore(bytes32,uint256,uint256,uint256):(bytes[],uint256[])",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp),
        ethereum.Value.fromUnsignedBigInt(_maxAge),
        ethereum.Value.fromUnsignedBigInt(_maxCount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getMultipleValuesBeforeResult(
        value[0].toBytesArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getNewValueCountbyQueryId(_queryId: Bytes): BigInt {
    let result = super.call(
      "getNewValueCountbyQueryId",
      "getNewValueCountbyQueryId(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_queryId)]
    );

    return result[0].toBigInt();
  }

  try_getNewValueCountbyQueryId(_queryId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNewValueCountbyQueryId",
      "getNewValueCountbyQueryId(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_queryId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRegisteredQueryTypeByIndex(_index: BigInt): string {
    let result = super.call(
      "getRegisteredQueryTypeByIndex",
      "getRegisteredQueryTypeByIndex(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );

    return result[0].toString();
  }

  try_getRegisteredQueryTypeByIndex(
    _index: BigInt
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getRegisteredQueryTypeByIndex",
      "getRegisteredQueryTypeByIndex(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getRegisteredQueryTypeCount(): BigInt {
    let result = super.call(
      "getRegisteredQueryTypeCount",
      "getRegisteredQueryTypeCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRegisteredQueryTypeCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRegisteredQueryTypeCount",
      "getRegisteredQueryTypeCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRegistration(
    _queryType: string
  ): Contract__getRegistrationResultValue0Struct {
    let result = super.call(
      "getRegistration",
      "getRegistration(string):((address,address,string,uint256,bool))",
      [ethereum.Value.fromString(_queryType)]
    );

    return changetype<Contract__getRegistrationResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getRegistration(
    _queryType: string
  ): ethereum.CallResult<Contract__getRegistrationResultValue0Struct> {
    let result = super.tryCall(
      "getRegistration",
      "getRegistration(string):((address,address,string,uint256,bool))",
      [ethereum.Value.fromString(_queryType)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getRegistrationResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getReporterByTimestamp(_queryId: Bytes, _timestamp: BigInt): Address {
    let result = super.call(
      "getReporterByTimestamp",
      "getReporterByTimestamp(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toAddress();
  }

  try_getReporterByTimestamp(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getReporterByTimestamp",
      "getReporterByTimestamp(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTimestampbyQueryIdandIndex(_queryId: Bytes, _index: BigInt): BigInt {
    let result = super.call(
      "getTimestampbyQueryIdandIndex",
      "getTimestampbyQueryIdandIndex(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTimestampbyQueryIdandIndex(
    _queryId: Bytes,
    _index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTimestampbyQueryIdandIndex",
      "getTimestampbyQueryIdandIndex(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  idMappingContract(): Address {
    let result = super.call(
      "idMappingContract",
      "idMappingContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_idMappingContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "idMappingContract",
      "idMappingContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isInDispute(_queryId: Bytes, _timestamp: BigInt): boolean {
    let result = super.call(
      "isInDispute",
      "isInDispute(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toBoolean();
  }

  try_isInDispute(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isInDispute",
      "isInDispute(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastSavedTrbPrice(): BigInt {
    let result = super.call(
      "lastSavedTrbPrice",
      "lastSavedTrbPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastSavedTrbPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastSavedTrbPrice",
      "lastSavedTrbPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registrationPricePerInifinityUSD(): BigInt {
    let result = super.call(
      "registrationPricePerInifinityUSD",
      "registrationPricePerInifinityUSD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_registrationPricePerInifinityUSD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "registrationPricePerInifinityUSD",
      "registrationPricePerInifinityUSD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registrationPricePerYearUSD(): BigInt {
    let result = super.call(
      "registrationPricePerYearUSD",
      "registrationPricePerYearUSD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_registrationPricePerYearUSD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "registrationPricePerYearUSD",
      "registrationPricePerYearUSD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  retrieveData(_queryId: Bytes, _timestamp: BigInt): Bytes {
    let result = super.call(
      "retrieveData",
      "retrieveData(bytes32,uint256):(bytes)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toBytes();
  }

  try_retrieveData(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "retrieveData",
      "retrieveData(bytes32,uint256):(bytes)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  specs(param0: string): Contract__specsResult {
    let result = super.call(
      "specs",
      "specs(string):(address,address,string,uint256,bool)",
      [ethereum.Value.fromString(param0)]
    );

    return new Contract__specsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBoolean()
    );
  }

  try_specs(param0: string): ethereum.CallResult<Contract__specsResult> {
    let result = super.tryCall(
      "specs",
      "specs(string):(address,address,string,uint256,bool)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__specsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBoolean()
      )
    );
  }

  tellor(): Address {
    let result = super.call("tellor", "tellor():(address)", []);

    return result[0].toAddress();
  }

  try_tellor(): ethereum.CallResult<Address> {
    let result = super.tryCall("tellor", "tellor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  trbPriceQueryId(): Bytes {
    let result = super.call(
      "trbPriceQueryId",
      "trbPriceQueryId():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_trbPriceQueryId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "trbPriceQueryId",
      "trbPriceQueryId():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  valueFor(_id: Bytes): Contract__valueForResult {
    let result = super.call(
      "valueFor",
      "valueFor(bytes32):(int256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(_id)]
    );

    return new Contract__valueForResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_valueFor(_id: Bytes): ethereum.CallResult<Contract__valueForResult> {
    let result = super.tryCall(
      "valueFor",
      "valueFor(bytes32):(int256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__valueForResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tellorMaster(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tellor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _reservedOwner(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _registrationPricePerYearUSD(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ExtendRegistrationCall extends ethereum.Call {
  get inputs(): ExtendRegistrationCall__Inputs {
    return new ExtendRegistrationCall__Inputs(this);
  }

  get outputs(): ExtendRegistrationCall__Outputs {
    return new ExtendRegistrationCall__Outputs(this);
  }
}

export class ExtendRegistrationCall__Inputs {
  _call: ExtendRegistrationCall;

  constructor(call: ExtendRegistrationCall) {
    this._call = call;
  }

  get _queryType(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ExtendRegistrationCall__Outputs {
  _call: ExtendRegistrationCall;

  constructor(call: ExtendRegistrationCall) {
    this._call = call;
  }
}

export class RegisterCall extends ethereum.Call {
  get inputs(): RegisterCall__Inputs {
    return new RegisterCall__Inputs(this);
  }

  get outputs(): RegisterCall__Outputs {
    return new RegisterCall__Outputs(this);
  }
}

export class RegisterCall__Inputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get _queryType(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RegisterCall__Outputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }
}

export class SetDocumentHashCall extends ethereum.Call {
  get inputs(): SetDocumentHashCall__Inputs {
    return new SetDocumentHashCall__Inputs(this);
  }

  get outputs(): SetDocumentHashCall__Outputs {
    return new SetDocumentHashCall__Outputs(this);
  }
}

export class SetDocumentHashCall__Inputs {
  _call: SetDocumentHashCall;

  constructor(call: SetDocumentHashCall) {
    this._call = call;
  }

  get _queryType(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _documentHash(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetDocumentHashCall__Outputs {
  _call: SetDocumentHashCall;

  constructor(call: SetDocumentHashCall) {
    this._call = call;
  }
}

export class SetIdMappingContractCall extends ethereum.Call {
  get inputs(): SetIdMappingContractCall__Inputs {
    return new SetIdMappingContractCall__Inputs(this);
  }

  get outputs(): SetIdMappingContractCall__Outputs {
    return new SetIdMappingContractCall__Outputs(this);
  }
}

export class SetIdMappingContractCall__Inputs {
  _call: SetIdMappingContractCall;

  constructor(call: SetIdMappingContractCall) {
    this._call = call;
  }

  get _addy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetIdMappingContractCall__Outputs {
  _call: SetIdMappingContractCall;

  constructor(call: SetIdMappingContractCall) {
    this._call = call;
  }
}

export class SetManagerAddressCall extends ethereum.Call {
  get inputs(): SetManagerAddressCall__Inputs {
    return new SetManagerAddressCall__Inputs(this);
  }

  get outputs(): SetManagerAddressCall__Outputs {
    return new SetManagerAddressCall__Outputs(this);
  }
}

export class SetManagerAddressCall__Inputs {
  _call: SetManagerAddressCall;

  constructor(call: SetManagerAddressCall) {
    this._call = call;
  }

  get _queryType(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _manager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetManagerAddressCall__Outputs {
  _call: SetManagerAddressCall;

  constructor(call: SetManagerAddressCall) {
    this._call = call;
  }
}

export class SetOwnerAddressCall extends ethereum.Call {
  get inputs(): SetOwnerAddressCall__Inputs {
    return new SetOwnerAddressCall__Inputs(this);
  }

  get outputs(): SetOwnerAddressCall__Outputs {
    return new SetOwnerAddressCall__Outputs(this);
  }
}

export class SetOwnerAddressCall__Inputs {
  _call: SetOwnerAddressCall;

  constructor(call: SetOwnerAddressCall) {
    this._call = call;
  }

  get _queryType(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _newOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetOwnerAddressCall__Outputs {
  _call: SetOwnerAddressCall;

  constructor(call: SetOwnerAddressCall) {
    this._call = call;
  }
}

export class UpdateTellorAddressCall extends ethereum.Call {
  get inputs(): UpdateTellorAddressCall__Inputs {
    return new UpdateTellorAddressCall__Inputs(this);
  }

  get outputs(): UpdateTellorAddressCall__Outputs {
    return new UpdateTellorAddressCall__Outputs(this);
  }
}

export class UpdateTellorAddressCall__Inputs {
  _call: UpdateTellorAddressCall;

  constructor(call: UpdateTellorAddressCall) {
    this._call = call;
  }
}

export class UpdateTellorAddressCall__Outputs {
  _call: UpdateTellorAddressCall;

  constructor(call: UpdateTellorAddressCall) {
    this._call = call;
  }
}
